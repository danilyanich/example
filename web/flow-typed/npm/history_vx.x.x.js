// flow-typed signature: 9f38c210f0d5777fc4a70ce796ce63e1
// flow-typed version: <<STUB>>/history_v4.7.2/flow_v0.66.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'history'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */


type isExtraneousPopstateEvent = boolean;
type addEventListener = (
  node: EventTarget,
  event: string,
  listener: EventListener
) => void;
type removeEventListener = (
  node: EventTarget,
  event: string,
  listener: EventListener
) => void;
type getConfirmation = (message: string, callback: (result: boolean) => void) => void;
type supportsHistory = () => boolean;
type supportsGoWithoutReloadUsingHash = () => boolean;

type Action = 'PUSH' | 'POP' | 'REPLACE';
type UnregisterCallback = () => void;

type $Path = string;
type $LocationKey = string;
type $LocationDescriptor = $Path | $LocationDescriptorObject;
type $LocationListener = (location: $Location, action: Action) => void;
type $LocationState = any;
type $Pathname = string;
type $Search = string;
type $TransitionHook = (location: $Location, callback: (result: any) => void) => any;
type $TransitionPromptHook = (location: $Location, action: Action) => string | false | void;
type $Hash = string;
type $Href = string;

declare type $Location = {
  pathname: $Pathname,
  search: $Search,
  state: $LocationState,
  hash: $Hash,
  key?: $LocationKey,
};

declare type $LocationDescriptorObject = {
  pathname?: $Pathname,
  search?: $Search,
  state?: $LocationState,
  hash?: $Hash,
  key?: $LocationKey,
};

declare class $History {
  length: number;
  action: Action;
  location: $Location;
  push(path: $Path, state?: $LocationState): void;
  push(location: $LocationDescriptorObject): void;
  replace(path: $Path, state?: $LocationState): void;
  replace(location: $LocationDescriptorObject): void;
  go(n: number): void;
  goBack(): void;
  goForward(): void;
  block(prompt?: boolean | string | $TransitionPromptHook): UnregisterCallback;
  listen(listener: $LocationListener): UnregisterCallback;
  createHref(location: $LocationDescriptorObject): $Href;
}

declare module 'history' {
  declare export type History = $History;
  declare export type Location = $Location;

  declare export type Path = $Path;
  declare export type LocationKey = $LocationKey;
  declare export type LocationDescriptor = $LocationDescriptor;
  declare export type LocationListener = $LocationListener;
  declare export type LocationState = $LocationState;
  declare export type Pathname = $Pathname;
  declare export type Search = $Search;
  declare export type TransitionHook = $TransitionHook;
  declare export type TransitionPromptHook = $TransitionPromptHook;
  declare export type Hash = $Hash;
  declare export type Href = $Href;
}

declare module 'history/createBrowserHistory' {
  declare type BrowserHistoryBuildOptions = {
    basename?: string,
    forceRefresh?: boolean,
    getUserConfirmation?: getConfirmation,
    keyLength?: number,
  }

  declare module.exports: {
    (options?: BrowserHistoryBuildOptions): $History
  };
}

declare module 'history/createHashHistory' {
  declare type HashType = 'hashbang' | 'noslash' | 'slash';

  declare type HashHistoryBuildOptions = {
    basename?: string,
    hashType?: HashType,
    getUserConfirmation?: getConfirmation,
  };

  declare module.exports: {
    (options?: HashHistoryBuildOptions): $History
  };
}

declare module 'history/createMemoryHistory' {
  declare type MemoryHistoryBuildOptions = {
    getUserConfirmation?: getConfirmation,
    initialEntries?: Array<string>,
    initialIndex?: number,
    keyLength?: number,
  };
  
  declare class MemoryHistory extends History {
    index: number,
    entries: Array<$Location>,
    canGo(n: number): boolean,
  }
  
  declare module.exports: {
    (options?: MemoryHistoryBuildOptions): MemoryHistory
  };
}

declare module 'history/createTransitionManager' {
  declare type PromptFunction = (location: $Location, action: Action) => any;

  declare type Prompt = PromptFunction | boolean;

  declare class TransitionManager {
    setPrompt(nextPrompt?: Prompt): UnregisterCallback,
    appendListener(listener: $LocationListener): UnregisterCallback,
    notifyListeners(location: $Location, action: Action): void,
    confirmTransitionTo(
      location: $Location,
      action: Action,
      getUserConfirmation: getConfirmation,
      callback: (result: boolean) => void
    ): void,
  }

  declare module.exports: {
    (): TransitionManager
  };
}
